#!/bin/bash

#getnewip

#
# Copyright (C) 2018 Caleb Woodbine <github.com/BobyMCbobs>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

#don't run unless owner is logged in
checkIfUserIsLoggedIn=true

VERSION=2.0

function helpMenu() {
#print help menu
local opt
opt=$1
case "$opt" in
	config)
echo "
How to setup config files
-------------------------

Every variable in the config files is important, unless regarded otherwise.

1 EASIEST) Run 'getnewip -m'

2 Easy) Make a copy of '/etc/getnewip/getnewip-example.conf' into
	   '/etc/getnewip/units/' as a new config file, and customise variables.
"
	;;

	sshconfig)
echo "
SSH config files
----------------

What are they for:
	SSH config files are a way of storing logins
	to make connecting to a host quicker.

Where:
	~/.ssh/config

Basic contents of a file:
	Host NICKNAME
		HostName IPADDRESS
"
	;;

	service)
echo "
Systemd service info
--------------------

Default seutp:
	By default, the service will
		- run as root.
		- run over all config files.
		- be DISABLED.

Location:
	The service file is located at 'etc/systemd/system/getnewip.service'.
	Note: You may need to reload the daemons after editing.

Enable service:
	'sudo systemctl enable getnewip.service'
"
	;;

	*)
echo "getnewip (version: $VERSION)
------------------------
Usage: getnewip -[n,s,t] [config file]

Running Modes:
	-n|--no-loop|-o|--once 		to not loop.
	-s|--service	 		to run in service mode, looping.
	-t|--testmode			for test mode.
	-l|--list			list available config files.
	-m|--make			make a unit config file.
	-h|--help			print this menu.
	  	  config		  get info on config files.
		  sshconfig		  get info on setting up '~/.ssh/config'.
		  service		  get info on systemd service.

Config files:
	Units:
		You can call a config file in '/etc/getnewip/units' to run it.

	Settings:
		getnewip settings config is located at '/etc/getnewip/getnewip-settings.conf'.
"
	;;
esac

}

function getDefaultUnitConfig() {

echo "localReferenceDevice='' 		## Address of local server: xxx.xxx.xxx.xxx (i.e 192.168.0.1).
localTestPorts=()			## open local ports to test from localReferenceDevice. i.e: (22 80 443) etc...
portCheckTimeOut=			## amount of time to wait until stop checking if port is active i.e: 3 (seconds).
pingServer=''				## always up external server to ping. i.e: '8.8.8.8'.
SSHcfgHost=('')				## .ssh/config host(s) to modify i.e serverRemote, homeserver.
dropboxFolder=''			## dropbox app folder i.e ServerIP, IP, Addresses.
gniUnit=''				## name of unit i.e mainServer, workServer, serverAtHome -- pretty name for config unit.
dropboxAppKey=''			## dropbox app key -- It should be a 64 character string.
includedUsers=('')			## user(s) to effect. i.e: ('jane' 'john' 'mark')"

}

function main() {
#main funtion that runs

if $fetchIPNoCheck
then
	internetTest

elif ! $fetchIPNoCheck
then
	IPfromDB
fi

}

function internetTest() {
#test internet
if ping -q -c 1 -W 1 $pingServer > /dev/null
then
  	#if internet is up
	echo "> Internet is connected, continuing."
	checkIfNotAtLocalDevice
else
  	#if internet is down
	echo "> No internet, continuing."
fi
}

function checkIfNotAtLocalDevice() {
#check if connection is external from server

capturePortActive=()
capturePortNum=0

for port in ${localTestPorts[@]}
do
	localPortTest=$(nc -zv -w3 $localReferenceDevice $port 2>&1)
	capturePortActive+=($?)
	[ "${capturePortActive[-1]}" = 0 ] || echo ">> Port: '$port' closed." && capturePortNum=$((capturePortNum+=1))
done

[ ! $capturePortNum = ${#localTestPorts[@]} ] && echo ">> '$gniUnit' config not completing, because not all ports suggested of '$localReferenceDevice' were open." || IPfromDB

}

function IPfromDB() {
#download current IP from dropbox

echo "> Downloading copy of IP from dropbox."
tmpFile="/tmp/getnewip_du_resp_$RANDOM"
newIPnum=$(curl --progress-bar -X POST --globoff -D "$tmpFile" --header "Authorization: Bearer $dropboxAppKey" --header "Dropbox-API-Arg: {\"path\": \"/$dropboxFolder/currentip-$gniUnit.txt\"}" "https://content.dropboxapi.com/2/files/download")

if [[ $newIPnum =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] || [ $? = 0 ]
then
	echo "> Downloaded IP successfully."
	rm $tmpFile
	modifySSHConfig
else
	echo "> Download Failed. Retrying."
	sleep $loopDelayTime
	IPfromDB
fi

}

function modifySSHConfig() {
#change .ssh/config

local user SSHconfigFileLocation

for user in ${includedUsers[@]}
do
	if [[ $(whoami) = $user || $(id -g) = 0 ]]
	then
		#echo ">> Whoops, you're not '$user'. Only users who own their file can edit it." && exit
		SSHconfigFileLocation=/home/$user/.ssh/config
		if [ -f $SSHconfigFileLocation ]
		then
			for givenHost in ${SSHcfgHost[@]}
			do
				oldIPnum=$(ssh -G $givenHost | grep -i "HostName " | head -n 1 | cut -d" " -f2)
				[[ $(id -g) = 0 ]] && oldIPnum=$(su $user -c "ssh -G $givenHost | grep -i 'HostName ' | head -n 1 | cut -d' ' -f2")

				[[ ! ${#includedUsers[@]} = 1 ]] && echo "> Updating '$user'."
				[[ -z $oldIPnum ]] && echo ">> Invalid host '$givenHost'." && return 1

				if [ ! $oldIPnum = $newIPnum ]
				then
					echo "> Host '$givenHost': Changing IP from $oldIPnum to $newIPnum in config"
					sed -i -e "s/$oldIPnum/$newIPnum/g" $SSHconfigFileLocation || echo ">> Failed to update IP."					
				else
					echo "> Host '$givenHost': IP hasn't changed from '$oldIPnum', doing nothing."
				fi
			done
		else
			echo ">> SSH config not found for user '$user'."
		fi
	else
		echo ">> Not updating config for '$user'. '$user' or root must do that."
	fi
done

}

function variableCheck() {
# check for empty variables in config file

local opt users host
opt=$@
users=$(awk -F'[/:]' '{if ($3 >= 1000 && $3 != 65534) print $1}' /etc/passwd)

local var
if [[ -z $localReferenceDevice || -z ${localTestPorts[@]} || -z $portCheckTimeOut || -z ${SSHcfgHost[@]} || -z $dropboxFolder || -z $gniUnit || -z $dropboxAppKey || -z ${includedUsers[@]} ]]
then
	[ -z $opt ] && echo ">> Please fill in all required variabled -- Edit '/etc/getnewip/units/$configFile'." && exit 1
	return 1
else
	for user in ${includedUsers[@]}
	do		
		if ! echo $users | grep -q $user
		then
			echo ">> Could not find user '$user'."
			return 1
		else
			for host in ${SSHcfgHost[@]}
			do
				! grep -q $host /home/$user/.ssh/config && echo ">> Cannot find SSH config file for user '$user'." && return 1
			done
		fi
	done
	return 0
fi

}

function configLoad() {
# load each iteration of config file and run each.

local configFiles
configFiles="$@"

echo ${configFiles[@]} | grep -q 'getnewip-example' && helpMenu config

for configFile in $configFiles
do
	if ! echo $configFile | grep -q ".conf"
	then
		configFile="$configFile.conf"
	fi

	if [ -f /etc/getnewip/units/$configFile ]
	then
		cleanVariables
		echo "> Loading config '$configFile'."
		. /etc/getnewip/units/$configFile
		variableCheck
		main
	else
		echo ">> Config '$configFile' not found."
	fi
done

}

function cleanVariables() {
# clean variables between checks

localReferenceDevice=''
localTestPorts=()
portCheckTimeOut=
pingServer=''
SSHcfgHost=('')
dropboxFolder=''
gniUnit=''
dropboxAppKey=''
includedUsers=('')

}

function listConfigUnits() {

local unit opt out counter
opt=$@
counter=0

[ ! -d /etc/getnewip/units ] && echo ">> Failed to find units folder."

for unit in $(ls /etc/getnewip/units)
do
	counter=$((counter+=1))
	out="$unit $out"
done

if [ -z $opt ]
then
	if [ $counter = 0 ]
	then
		echo ">> No units available. Please create one. 'getnewip -h config' for help, 'getnewip -m' to make one."

	elif [ $counter = 1 ]
	then
		echo "$counter available unit: $out"
	else
		echo "$counter available units: $out"
	fi
else
	echo "$out"
fi

}

function makeNewConfigUnit() {
# create a new unit file

local user
user=$(whoami)

if [ ! -f $tempFile ] || [ -z $tempFile ]
then
	tempFile="/tmp/getnewip-unit-$RANDOM$RANDOM-temp"
	getDefaultUnitConfig > $tempFile
fi

nano $tempFile

echo "
	0) Re-[e]dit config file again.
	1) [R]estart.
	2) [S]ave and exit.
	q) [Q]uit without saving.
"

read -p ": " continuevar
echo
case $continuevar in
	0|e|E)
		makeNewConfigUnit
	;;

	1|r|R)
		[ -f $tempFile ] && rm $tempFile && echo "> Cleaned up temporary files."
		tempFile=
		makeNewConfigUnit
	;;

	2|s|S)
		if . $tempFile && variableCheck a
		then	
			$sudoProg install -g $user -o $user -m 0600 $tempFile /etc/getnewip/units/$gniUnit.conf && echo "> Config '$gniUnit' saved." && exit 0
			echo ">> Failed to write config." && [ -f $tempFile ] && rm $tempFile && echo "> Cleaned up temporary files."  && exit 1
		else
			echo ">> Variables not set correctly. Please fix them." && sleep 1 && makeNewConfigUnit
		fi
	;;

	q|Q)
		[ -f $tempFile ] && rm $tempFile && echo "> Cleaned up temporary files."
		exit 0
	;;
esac

}

function startMain() {
# pass opts to main function

local configFiles opt arrayOpts
configFiles="$@"
arrayOpts=()

[[ $configFiles = "-a" || $configFiles = "--all" ]] && configFiles=$(listConfigUnits a)

for opt in $configFiles
do
	arrayOpts+=($opt)
done

if [ "${#arrayOpts[@]}" = 0 ]
then
	helpMenu

else
	if ! $isLooped
	then
		configLoad "$configFiles"

	elif $isLooped
	then
		while true
		do
			configLoad "$configFiles"
			echo "> Waiting '$loopDelayTime'."
			sleep $loopDelayTime
		done
	fi
fi

exit

}

if [ -f /etc/getnewip/getnewip-settings.conf ]
then
	. /etc/getnewip/getnewip-settings.conf
else
	echo ">> Missing settings config file. Please reinstall."
	helpMenu
	exit 1
fi

if id | grep -q sudo && which sudo > /dev/null
then
	sudoProg="sudo"

elif [ $(id -u) = 0 ]
then
	sudoProg=""
else
	echo ">> You must be in sudoers or be root to use some this program."
	exit
fi

optCount=0
givenOpt="$1"

case "$givenOpt" in
	-n|--no-loop|-o|--once)
		# no loop.
		shift
		readonly isLooped=false
		readonly fetchIPNoCheck=true
		echo "> Running single check."
		startMain "$@"
	;;

	-s|--service)
		# service mode, run as loop.
		shift
		readonly isLooped=true
		readonly fetchIPNoCheck=false
		echo "> Running in service mode."
		echo ">> Date: $(date)."
		startMain "$@"
	;;

	-t|--testmode)
		# fetch IP regardless, once.		
		shift
		readonly isLooped=false
		readonly fetchIPNoCheck=false
		echo "> Running in test mode."
		startMain "$@"
	;;

	-l|--list)
		listConfigUnits
	;;

	-m|--make)
		makeNewConfigUnit
	;;

	-h|--help)
		shift
		helpMenu "$@"
		exit
	;;

	*)
		helpMenu
		[[ $(listConfigUnits a) = "" ]] && listConfigUnits
	;;
esac
